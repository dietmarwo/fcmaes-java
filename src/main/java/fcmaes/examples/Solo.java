package fcmaes.examples;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

import org.apache.commons.lang3.ArrayUtils;
import org.hipparchus.geometry.euclidean.threed.Rotation;
import org.hipparchus.geometry.euclidean.threed.RotationConvention;
import org.hipparchus.geometry.euclidean.threed.Vector3D;

import fcmaes.core.Fitness;
import fcmaes.core.Jni;
import fcmaes.core.Log;
import fcmaes.core.Optimizers.Bite;
import fcmaes.core.Utils;
import fcmaes.kepler.Kepler;
import fcmaes.kepler.RVT;
import fcmaes.kepler.Resonance;

public class Solo extends Fitness {
    
    /*
     * Works not on Windows! Use the Linux subsystem for Windows there.
     * 
     * This code is derived from https://github.com/esa/pykep/pull/127 
     * originally developed by Moritz v. Looz @mlooz . 
     * It was modified following suggestions from Waldemar Martens @MartensWaldemar_gitlab
     * In this implementation there are restrictions regarding the allowed planet 
     * sequence which will be removed in later revisions.
     * The code is designed around an "orbit abstraction" class RVT simplifying the
     * definition of the objective function. 
     * This problem is quite a challenge for state of the art optimizers, but
     * good solutions fulfilling the requirements can be found.
     * See https://www.esa.int/Science_Exploration/Space_Science/Solar_Orbiter
     * 
     * This Java code is about factor 3.6 faster than the equivalent Python code
     * https://github.com/dietmarwo/fast-cma-es/blob/master/examples/solar_orbiter_udp.py
     */
    
    static final int[][][] resos_ = new int[][][] {
        {{1,1}, {5,4}, {4,3}},
        {{1,1}, {5,4}, {4,3}},
        {{1,1}, {5,4}, {4,3}},
        {{4,3}, {3,2}, {5,3}},
        {{4,3}, {3,2}, {5,3}},
        {{4,3}, {3,2}, {5,3}}
        };
    
    static String resoFile_ = "resos1c.txt";

    static final int earth = 3;

    static final int venus = 2;
    
    static final int max_revolutions = 2;

    static final double maxLaunchDV = 5600;
    
    static final double safe_distance = 350000;

    static final double min_dist_sun = 0.28; // AU

    static final double max_dist_sun = 1.2; // AU

    static final double max_mission_time = 11.6*Utils.YEAR;

    static final double max_log_y_value = 9000;
    
    static final long log_interval_evals = 200000000;
//    static final long log_interval_evals = 10000000;

    static final double AU = 1.49597870691e11; // m
    
    static final double  theta = Math.toRadians(7.25);
   
    Vector3D _rotation_axis;
    
    int[][] _usedResos = null;
    
    List<Double> logData = null;
    
    Solo() {
        super(11);
        init();
    }

    Vector3D rotate_vector(Vector3D v) {
        Rotation rot = new Rotation(_rotation_axis, theta, RotationConvention.VECTOR_OPERATOR);
        return rot.applyTo(v);
    }
    
    void init() {
        double t_plane_crossing = 7645;
        double[] r = new double[3];
        double[] v = new double[3];
        Jni.planetEplC(3, t_plane_crossing, r, v);
        _rotation_axis = Utils.vector(r).normalize();
    }

    public Solo create() {
        Solo solo = new Solo();
        solo._rotation_axis = _rotation_axis;
        return solo;
    }

    double period(int pli, double time) {
        double[] data = new double[5];
        Jni.planetDataC(pli, time/Utils.DAY, data);
        return data[0];
    }
 
    public double[] guess() {
        return Utils.rnd(lower(), upper());
    }

    public double[] lower() {
        return new double[] {7000, 50, 50, 50, -Math.PI, -Math.PI, -Math.PI, -Math.PI, -Math.PI, -Math.PI, -Math.PI};
    }

    public double[] upper() {
        return new double[] {8000, 420, 400, 400, Math.PI, Math.PI, Math.PI, Math.PI, Math.PI, Math.PI, Math.PI};
    }

    public String toString() {
        StringBuffer sb = new StringBuffer("c= " + _evals + " v= " + Utils.r(_bestY, 10));
        sb.append(" ");
        sb.append(Arrays.toString(_bestX));
        return sb.toString();
    }

    static Vector3D v_planet(int pli, double time) {
        double[] r = new double[3];
        double[] v = new double[3];
        Jni.planetEplC(pli, time/Utils.DAY, r, v);
        return Utils.vector(v);
    }
    
    static double ga_dv(int pli, double time, Vector3D vin, Vector3D vout) {
        Vector3D vpl = v_planet(pli, time);
        double[] v_rel_in = Utils.array(vin.subtract(vpl));
        double[] v_rel_out = Utils.array(vout.subtract(vpl));
        return Jni.fb_vel(v_rel_in, v_rel_out, pli);
    }
 
    static void mga(RVT in, int pli1, int pli2, double time, double tof, Vector3D[] vout_in, 
            List<RVT> outs, List<Double> dvs) {
        RVT planet2 = new RVT(pli2, (time+tof)/Utils.DAY);
        Vector3D[] lambert = in.bestLambert(planet2, pli1, false, max_revolutions);
        vout_in[0] = lambert[0];
        vout_in[1] = lambert[1];
        RVT out = new RVT(in);
        out.setV(lambert[0]);
        outs.add(out);
        dvs.add(ga_dv(pli1, time, in.v(), lambert[0]));
    }

    RVT fb_prop_rotate(int pli, double time, Vector3D vin, double beta) {
        Vector3D vpl = v_planet(pli, time);
        double[] data = new double[5];
        Jni.planetDataC(pli, time/Utils.DAY, data);
        double mu = data[2];
        double rp = data[3] + safe_distance; // radius + safe_distance
        double[] vout = new double[3];
        Jni.fb_prop(Utils.array(vin), Utils.array(vpl), rp, beta, mu, vout);
        Vector3D r = new RVT(pli, time/Utils.DAY).r();
        r = rotate_vector(r);
        Vector3D v = rotate_vector(Utils.vector(vout));
        RVT fin = rvt(pli, time, v);
        fin.setR(r);
        return fin;
    }
   
    static RVT rvt(int pli, double time, Vector3D vout) {
        RVT rvt = new RVT(pli, time/Utils.DAY);
        rvt.setV(vout);
        return rvt;
    }
    
    private static class Trajectory {
        double y;
        double[] x;
        
        Trajectory(double y, double[] x) {
            this.y = y;
            this.x = x;
        }

        String resos() {
            Solo solo = new Solo();
            solo.logData = new ArrayList<Double>();
            solo.eval(x);
            return "" + y + " " + Utils.r(solo._usedResos, "") + " " + 
                Arrays.toString(solo.logData.toArray()) + " " + Arrays.toString(x);
        }
        static int count = 1;
        String pretty() {
            Solo solo = new Solo();
            solo.logData = new ArrayList<Double>();
            solo.eval(x);            
            return "|" + (count++) + " |" + Utils.r(y) + " |" + Utils.r(solo._usedResos, "") + " |" + Utils.r(solo.logData.get(0)) + 
                    " |" + Utils.r(solo.logData.get(2)) + " |" + Utils.r(solo.logData.get(3)) + 
                    " |" + Utils.r(solo.logData.get(4)) + " |" + Utils.r(solo.logData.get(5));
        }

    }

    static double bestY_ = 1E99;
    static ConcurrentHashMap<Long,Trajectory> bestTrajectories_ = new ConcurrentHashMap<Long,Trajectory>();
    static AtomicLong counter_ = new AtomicLong(0);
    static List<RVT> outs_; // trajectory orbit log 
    static int[][] bestResos_ = new int[6][2]; // used resonances
    
    void dumpTrajectories(String fname) {
        TreeMap<Double,Trajectory> sorted = new TreeMap<Double,Trajectory>();
        for (Trajectory tra: bestTrajectories_.values())
            sorted.put(tra.y, tra);
        StringBuffer buf = new StringBuffer();
        buf.append("best = " + bestY_ + " evals = " + counter_.get() + " " + Utils.measuredSeconds() + " sec\n");
        for (double y: sorted.keySet()) {
            if (y < max_log_y_value) 
                buf.append(sorted.get(y).resos() + "\n");
        }
        buf.append("\n");
        try {
            Files.write(Paths.get(fname), buf.toString().getBytes(), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
        } catch (IOException e) {
            System.err.println("Cannot write to " + resoFile_ + ": " + e.getMessage());
        }
    }
    
    void prettyTrajectories(String fname) {
        TreeMap<Double,Trajectory> sorted = new TreeMap<Double,Trajectory>();
        for (Trajectory tra: bestTrajectories_.values())
            sorted.put(tra.y, tra);
        StringBuffer buf = new StringBuffer();
        for (double y: sorted.keySet()) {
            buf.append(sorted.get(y).pretty() + "\n");
        }
        buf.append("\n");
        try {
            Files.write(Paths.get(fname), buf.toString().getBytes(), StandardOpenOption.CREATE, StandardOpenOption.APPEND);
        } catch (IOException e) {
            System.err.println("Cannot write to " + resoFile_ + ": " + e.getMessage());
        }
    }

    @Override
    public double eval(double[] x) {
        List<Double> dvs = new ArrayList<Double>();
        double reso_penalty = 0;
        double t;
        double t0 = t = x[0]*Utils.DAY;
        double tof01 = x[1]*Utils.DAY;
        double tof23 = x[2]*Utils.DAY;
        double tof34 = x[3]*Utils.DAY;
        double[] beta = Arrays.copyOfRange(x, 4, 11);
        List<RVT> outs = new ArrayList<RVT>(); // trajectory orbits
        RVT start = new RVT(3, t/Utils.DAY);
        Vector3D[] vout_in = new Vector3D[2];
        mga(start, earth, venus, t, tof01, vout_in, outs, dvs); 
        double dvStart = dvs.get(0);
        dvs.set(0, Math.max(0, dvStart - maxLaunchDV));
        int[][] resos = new int[6][];
        
        t += tof01;
        Resonance res1 = Resonance.resonance(venus, t, vout_in[1], resos_[0], 
                beta[0], safe_distance, outs, dvs);
        reso_penalty += res1._dt;
        resos[0] = res1.selected();
        long hash = res1._index;
        
        t += res1.tof();
        RVT in = rvt(venus, t, res1._vout);
        mga(in, venus, earth, t, tof23, vout_in, outs, dvs); 
 
        t += tof23;
        in = rvt(earth, t, vout_in[1]);
        mga(in, earth, venus, t, tof34, vout_in, outs, dvs); 
        
        t += tof34;
        Resonance res = null;
        for (int r = 1; r < resos.length; r++) {
            Vector3D v_in = res != null ? res._vout : vout_in[1];
            res = Resonance.resonance(venus, t, v_in, resos_[r], 
                    beta[r], safe_distance, outs, dvs);
            reso_penalty += res._dt;
            resos[r] = res.selected();
            hash = 31 * hash + res._index;
            t += res.tof();
        }
        RVT fin = fb_prop_rotate(venus, t, res._vout, beta[6]);
        Kepler finKep = fin.kepler();
        
        // orbit should be as polar as possible, but we do not care about prograde/retrograde
        double corrected_inclination = Math.toDegrees(Math.abs(Math.abs(finKep.i() % Math.PI - Math.PI/2)));
        double final_perhelion = finKep.periapsis()/AU;
        double final_aphelion = finKep.apoapsis()/AU;
        
        double min_sun_distance = final_perhelion;
        double max_sun_distance = final_aphelion;
        
        for (int i = 0; i < outs.size()-1; i++) {
            RVT rvt0 = outs.get(i);
            RVT rvt1 = outs.get(i+1);
            double dt = rvt1.t() - rvt0.t();
            
            Kepler kep = rvt0.kepler();
            double period = kep.period(rvt0.mu());
            if (dt > period) {
                max_sun_distance = Math.max(max_sun_distance, kep.apoapsis()/AU);
                min_sun_distance = Math.min(min_sun_distance, kep.periapsis()/AU);
            }   
//            System.out.println("" + i + " " + Utils.r(dt/Utils.DAY) + " " +
//                    Utils.r(period/Utils.DAY) + " " + Utils.r(Math.toDegrees(kep.i())) +  " " + 
//                    Utils.r(min_sun_distance) + " " + Utils.r(max_sun_distance) + " " + rvt0); 
        }
        double distance_penalty = Math.max(0, min_dist_sun - min_sun_distance);  
        distance_penalty += Math.max(0, max_sun_distance - max_dist_sun);  

        if (logData != null) {
            logData.add(Math.toDegrees(finKep.i()));
            logData.add(final_perhelion);
            logData.add(min_sun_distance);
            logData.add(max_sun_distance);
            logData.add((t - t0)/Utils.DAY/Utils.YEAR);
            logData.add(Utils.sum(dvs));
        }
        
        if (final_perhelion < min_dist_sun)
            final_perhelion += 10*(min_dist_sun - final_perhelion);
        double time_val = (t - t0)/Utils.DAY;
        if (time_val > max_mission_time)
            time_val += 10*(time_val - max_mission_time);
        
        double value = 100*Utils.sum(dvs) + reso_penalty + 100*(corrected_inclination) + 
                5000*(final_perhelion-min_dist_sun) + 0.5*time_val + 50000 * distance_penalty;        
        _usedResos = resos;
        
        // store best trajectory for a given resonance sequence
        if (!bestTrajectories_.containsKey(hash) || value < bestTrajectories_.get(hash).y)
            bestTrajectories_.put(hash, new Trajectory(value, x));
        
        if (counter_.getAndIncrement() % log_interval_evals == log_interval_evals-1)
            dumpTrajectories(resoFile_);
        
        if (value < bestY_ && value < max_log_y_value) {
             bestY_ = value;
             bestResos_ = resos;
             outs_ = outs;
             System.out.println("" + Utils.r(Math.toDegrees(finKep.i())) +  " " + 
                     Utils.r(final_perhelion) + " " + Utils.r(min_sun_distance) + " " + 
                     Utils.r(max_sun_distance) + " " + Utils.r(Utils.sum(dvs)) + " " + 
                     Utils.r(reso_penalty) + " " + Utils.r(time_val) + " " + 
                     Utils.r(resos,"") + " " + Utils.r(value) + " " + Arrays.toString(x));  
        }
        return value;
    }
    
    void check_good_solutions() {
        double[][] xs = new double[][] {  
                {7450.239924571399, 406.44188435432005, 163.9173987694902, 333.96146422254833, 0.15828232590808275, -2.9185160114152326, 3.105089438204732, 2.160380932532115, 2.6437386175574833, 3.0487730887836033, 2.4273597927749297},
                {7455.902488746193, 401.0792537265972, 165.14415011815262, 333.6335011066877, 0.16070982867353295, -2.9119761044572483, 3.1051359430519705, 2.157774508684426, 3.0700408052769594, 2.64311521540639, 2.43108916086889},
                {7450.151104684442, 406.63544455841753, 163.97839905907972, 333.86088935030295, 0.15803428249908488, -2.9184400251051157, 3.1050982997255527, 2.1599727858949396, 2.643655675193356, 2.60515815710665, 2.860734661799869},
                {7451.496060419208, 401.6374077713582, 159.7836853823773, 337.90729656896247, 0.16755367766006002, -2.9293379069824463, 2.1761327670495274, 2.646998951175027, 3.046319790625079, 3.0463399003202754, 2.428963119079385},
                {7453.044486353655, 404.7744249590598, 165.79261565237653, 332.8314236865944, 0.15690378110625397, -2.9103088011578238, 3.105208731029327, 2.1543212162597123, 3.070385508915521, 2.083434675032324, 2.874734901482471},
                {7451.563607756639, 405.53182148316057, 164.699148676369, 333.5424966938019, 0.15788760796111923, -2.914982011425519, 2.1581553345941895, 3.0700230921695555, 2.643193942426391, 3.049141783477507, 2.4261201696504027},
                {7452.343799171487, 399.891998690228, 158.17751902785636, 339.0442272695303, 0.17098322095056093, -2.934298778627312, 3.1046578088620067, 2.180569874753884, 2.6479422935188706, -2.8025605004025427, 1.8225546059640485},
                {7454.838702337156, 399.4110524455638, 161.05827467049735, 336.5308704057313, 0.16756536540322817, -2.9272746442015127, 2.453969789998505, 2.424737916567272, 3.04707888356294, 3.047098699021893, 2.428649703689945},
                {7454.2368952260695, 403.98218137889495, 166.4763043340443, 332.4391635971476, 0.15654106823704117, -2.9071905612119515, 2.152279820391427, 3.070578914236636, 2.641937356990984, 2.603946826198776, 2.864035359324433},
                {7453.501839070949, 399.78052955051254, 159.7103743498783, 337.6738979495335, 0.16906786064997947, -2.930986762181984, 2.1760459125876945, 2.6469935304063426, 3.0463472889208356, 2.607335707200924, 2.866441401151307},
                {7450.359515155382, 403.3252592328672, 160.6075680285267, 337.2244515108991, 0.16521880889883736, -2.9271434434435646, 3.1048093614869248, 2.1734705401455887, 3.0684502877834885, 3.0684727442839805, 1.8072503142434184},
                {7445.796821388496, 407.6690538337637, 159.57286398265686, 337.40999415233085, 0.16340131582003545, -2.9331009400501813, 2.1759412060793757, 2.646989046520626, 3.046382478250886, -2.800243417551116, 1.7924799168396799},
                {7448.189971656779, 407.6727679160536, 162.49974522906564, 334.79699592186586, 0.15932615303593975, -2.9245843625579693, 2.1649577863767364, 3.069364548388011, 3.069395155080178, 2.6446135188369415, 2.4260558140856205},
                {7453.556404699899, 400.14303665038494, 160.39705745592312, 337.17993222390606, 0.1678807819025638, 2.731853285323405, -2.5344189166225277, 2.173504289956675, 2.6464740083581795, 3.046746658329073, 2.428250153467077},
                {7454.435091451019, 399.7821096744638, 161.08692401518113, 336.5725489219414, 0.16724059051982954, -2.92691387917298, 2.4539837149238033, 2.4247472379452844, 3.047071588628822, 2.606717706555226, 2.8679407482508306},
                {7453.976609974264, 399.3537520289326, 159.68212730455485, 337.60281547971687, 0.1694392892982509, -2.9315104113242647, 2.1760127850838034, 2.6469908882132405, -2.80033942257109, 2.1032481712900406, 2.8568098265485027},
                {7454.238246553042, 404.2447563806575, 166.7423122843301, 332.1935989800321, 0.15593070086844532, -2.9061994907545015, 2.1510932659732394, 3.0706926311111604, 3.070722857982092, 2.0801136831153597, 2.8734137546844716},
                {7447.802505594926, 406.52751270771813, 160.98320949693726, 336.4307600678036, 0.16234474729225926, -2.928168217612013, 2.4539346052391635, 2.4247143343043294, 3.0470972767240903, -2.798109089762334, 1.7866977615407051},
                {7452.423950504279, 399.33012367621745, 157.3016562957886, 339.696660095714, 0.17256617889736087, 2.505458333263697, -2.2486517927817826, 2.182715684182868, 2.648390025691522, 3.0452551885221135, 2.435103691015294},
                {7454.237732679805, 404.148581750521, 166.6461432040543, 332.2831686009285, 0.15615327971445678, 2.7434105089030143, 2.8717779139612207, 2.6417697988604165, 3.050095973964877, 3.050112889762448, 2.4358230753034187},
                {7451.780757666539, 402.03807295423246, 160.7858471065028, 337.0612263125764, 0.16593557105339465, -2.9267209977882884, 2.1729879220480943, 3.0685058908480456, 2.646292252981747, -2.7988159082826134, 1.8167632977100259},
                {7455.41434540162, 399.4968288858187, 162.0451656966609, 335.7968654604036, 0.16617169012075514, -2.923905497847812, 2.4521839209777943, 2.4232102920975276, -2.7966768110014355, 2.6452843760532994, 2.4273462712626426},
                {7453.570311225611, 399.71915366784776, 159.7073251206892, 337.6634027418715, 0.16911972260973882, -2.9310571531314906, 2.1760391995098862, 2.646992743055155, -2.8003540639359694, 3.068234075698522, 1.8099126522276316},
                {7454.147309508998, 403.6198120679275, 165.97986184382015, 332.86824157554656, 0.1575601444868956, -2.9090699798959974, 2.1543545464735896, 3.0703793203814462, 3.0704095958727695, 3.07043187769297, 1.8196295307434045},
                {7456.319326446492, 400.57844282288113, 165.0081496676542, 333.71839397990004, 0.1612789554648457, -2.9125557126871597, 2.4467528315205747, 2.872252235387801, 2.643189026582648, -2.7919937345080315, 1.838644015636218},
                {7439.41702630647, 411.8794953843456, 155.26164832744408, 339.96119083724955, 0.166049690877018, 2.495209239680041, -2.2546900135110617, 2.1878915402480237, 2.649519709506779, 2.609022372383888, 2.8497088080617785},
                {7451.94004434429, 402.50117937771637, 161.66497119758134, 336.3342291565756, 0.16442012190974223, 2.7345872373637987, -2.53185014152614, 2.169635349728321, 2.645656212883906, 2.606471586517607, 2.857243865945741},
                {7448.368273034002, 405.8931419919399, 161.04776692706025, 336.51609609063416, 0.16273331521605047, -2.9274040294408126, 2.45396474440936, 2.4247345351230623, -2.7981934596085023, 2.099087398025641, 2.8587489173217806},
                {7502.393078250269, 158.61712352959714, 321.93180497636564, 354.7203604373312, 2.9925508420497837, -2.963810477446631, 2.2002066077391174, 2.652457245522309, 2.611285822302021, -2.815702907203595, 2.437902724288713},
                {7456.850874777861, 400.28570454096973, 165.31956941738176, 333.4799215504972, 0.16106232183781155, 2.7412688538416696, -2.5233650791903126, 2.15671627198571, 2.6429368727074034, -2.7914392574769558, 1.915593694849413},
                {7454.266428431334, 399.9575951006775, 161.12970781041517, 336.5669311180504, 0.16704868994972782, -2.926660322473741, 2.4539343184837326, 2.873178916860209, 2.6459743299706364, 2.6066933559986616, 2.8699721950356674},
                {7452.423951421331, 399.32996508806735, 157.30137047286556, 339.6968825207672, 0.17256667710403742, 2.5054581024335705, -2.2486526693060487, 2.1827164339769873, 3.0674691392794453, 2.6483480221721196, 2.439600289537648},
                {7983.958411379929, 420.12434689101656, 168.83202232091818, 339.10624936801594, 2.948776898536864, -0.0940636347450828, 0.03861516057598848, 0.8921408612707535, 0.9738211102489204, -0.2961522871464888, 0.700923564997403},
                {7439.378568467748, 411.9403199752479, 155.25825675107382, 339.9248211504219, 0.16601009689396948, 2.4949579089805813, 3.066887323018758, 2.6495362543705587, 3.0444320553903257, 3.044447995367056, 2.465273449955512},
                {7999.9472483892305, 415.1172136635395, 171.4894691734631, 336.7565418248572, 2.9629645540479084, -0.14051191943991823, 0.9045424143572725, 0.481162638281328, -0.3108227631268314, 0.4812089517577665, 0.7100711518100099},
                {7502.557955531384, 158.93546270372218, 322.001070122463, 354.80693274032444, 2.9946952088512058, -2.9600911102005316, 2.467881771278963, 2.4369190109740546, 2.610892342788508, -2.8136464387015834, 2.437666506806593},
                {7440.520008237633, 410.30077802449966, 155.3746311859832, 340.97217831370347, 0.16702264826001134, 2.5025134447775135, -2.25445132058936, 2.1876681405871863, 3.0669275577541293, 2.113988543099287, 2.863814686446427},
                {7439.210715801086, 412.1616613567064, 155.21076271757914, 339.8334938546196, 0.1659118954438546, 2.4941047990128653, -3.0107962811821416, 2.4324977486530797, 3.0444586444650246, 3.0444766700267913, 2.4465060996250814},
                {7504.132871576611, 156.69352386828615, 321.9737692433905, 354.58120785853293, 2.989261305311198, -2.965650037031065, 2.2021497525043654, 2.6528318769624804, 2.611478283092951, -2.2426975972897476, 1.8092419956016015},
                {7499.6782481387645, 161.29037683116957, 321.7046441715463, 355.03273201363237, 2.9953719856628385, -2.962898023756769, 2.4690657863260026, 2.875289546938525, 2.6521192764676234, 3.0430849149274595, 2.454070103222305},
                {7436.9386000816885, 412.9575531102687, 153.07055625252073, 342.07143578473193, 0.168134345089466, 2.718274859205692, -2.5480016918609127, 2.193608470910218, 3.066268919175707, 2.6506548962232546, 2.4246581040659354},
                {7439.38947664284, 411.43041519320553, 154.90337721139554, 340.7324012640777, 0.16683851501507863, 2.498126129205496, 3.066731475686664, 3.0667682076067058, 2.649726313773495, 3.0442292242233684, 2.4589597412350277},
                {7502.161789156863, 158.04373656419247, 321.8163380791488, 354.5409046703469, 2.9889246674969323, 2.4847527425947593, -2.2757531961948287, 2.2059362947303014, 2.6535815628079864, -2.8148095724183055, 1.8578281926111624},
                {7499.541280555776, 161.2683558672078, 321.6802517457886, 355.0069579808159, 2.9947809455373195, -2.9641053899063543, 2.1998682133930796, 2.6524084339126657, 2.6112818229573422, 3.0144158115382194, 2.897934347996823},
                {7503.388463282457, 158.00316179848267, 322.03520483386467, 354.7202093734778, 2.9931422411028086, 2.4886372577979983, 3.066089802868617, 2.651937077634433, 3.043222543657213, -2.8104979278438518, 1.670436274067797},
                {7452.459330052437, 399.3459052890212, 157.384169274244, 339.62047543907556, 0.17244688233073724, 2.5054445634503493, 3.0674437931975826, 2.6483662485790616, 2.6082262329144954, -2.806476806299204, 2.4628782319665024},
                {7441.2515502379665, 409.89368291311894, 155.92994363623228, 340.4510798955243, 0.1665930550362712, 2.502307688382517, 3.0670274765172363, 2.6491773325222248, 3.0446438745148536, 2.608748469872298, 2.9056778551997335},
                {7502.050315879794, 159.41183977672287, 321.9618692371531, 354.850863432938, 2.995148807361745, -2.96014284074142, 2.4678526430057546, 2.436897179221364, -2.8099579614528163, 3.0663081930790477, 1.7318854211925907},
                {7453.479443751756, 399.3420957218684, 158.91775346864316, 338.2316162294142, 0.17045400361389232, 2.505557054363764, 3.067929605595845, 2.647448856098113, -2.8013814711687997, 2.647389286471568, 2.4339113429771166},
                {7454.238610988441, 404.2444508365707, 166.74245872766033, 332.1935393582474, 0.15593073384422318, 2.7435662810846475, 2.871747238419818, 2.6416787425792108, -2.788736610840911, 2.6416090203136133, 2.4257572029685175},
                {7987.182067118835, 418.0084250847788, 168.96097844718972, 339.0714906843456, 2.950439254533791, -0.09974964284664584, 0.038609598820873184, 0.8917612125614556, 0.9733449902886868, 0.14347301013793057, 0.2626600883417288},
                {7440.536015275042, 411.1149988451448, 156.0423787714522, 339.54067488511686, 0.16557359790860834, -2.9461083659361944, 0.6796121572972319, 2.8741880754981644, 3.067188431065838, 2.648984004503929, 2.5389061693681265},
                {7452.464687934934, 399.3322017892965, 157.3673384934897, 339.63187994326523, 0.1724796350320674, 2.5054208633476907, -2.2484501696311368, 2.182543594138899, 3.067488403062392, 3.0675154934758764, 1.906045871671801},
                {7454.124385656127, 403.905394629532, 166.2561771539581, 332.6186246289238, 0.1569277060108322, 2.742679657243121, 3.0797829137365555, 2.415987623327465, 3.0498809980928883, 3.049899164591745, 2.4304015685425826},
                {7456.667371596023, 399.71546522108184, 164.20039797604235, 334.2428836292753, 0.16305547152952835, -2.915896741103399, 2.448196034982039, 2.8724435357577294, 3.069774529108789, 2.0892454450467577, 2.8615220210741343},
                {7454.357844218216, 403.28046929668017, 165.87144938118652, 332.99049123834584, 0.1579854106340389, 2.742160229172044, 2.872015869728384, 3.070361308988299, 2.6424270511126404, 3.0496412629057006, 2.4336421964991675},
                {7454.241988872703, 404.007593180924, 166.5086893017043, 332.41053377106556, 0.15647248492875535, 2.7431886957397738, 2.871821522447221, 2.641898182082989, 3.0500083647369354, -2.7891572688365436, 1.7281891067591792},
                {7990.924435791489, 419.95037380720424, 170.88342065058106, 337.15350992595916, 2.9568978303049365, -0.12007734434567165, 0.9025726037149774, 0.08069827473652931, 0.9811973779659846, -0.30351654308977544, 0.7151832032580377},
                {7454.840100643831, 399.9665879204341, 161.97758594154774, 335.9141126630237, 0.16590383071436599, 2.7342101182549, -2.5309181523902136, 2.168235154271552, 3.069007179642509, 2.0962854248756155, 2.8699206205966044},
                {7992.516619481391, 417.48686539121127, 170.2832219935991, 337.81909952993726, 2.9563871587889086, -0.11867807750325506, 0.03832094163309273, 0.8984414622593992, 0.9778365311357226, -0.845613120642483, 1.2696737819343664},
                {7457.245693118716, 399.9362380876755, 165.35277574752064, 333.43577930933714, 0.16127929412060804, 2.741255171998082, -2.5232458439151606, 2.156533710269005, 3.0701681401684717, 3.0701928491537647, 1.883572443901594},
                {7455.954711587982, 399.92455735504643, 163.51197105800688, 334.7636431475603, 0.16384736264748873, 2.7371556077435493, 2.8726216927523303, 2.644282996246158, 3.048355121370478, 2.6055434190280633, 2.8928125746684965},
                {7500.730047436856, 160.51534884472284, 321.83012814152596, 354.9574799773477, 2.995585341980963, 2.488178853971884, -3.0129836851551275, 2.437183149292758, 3.0433404909312682, -2.810212259232462, 1.6937166230623186},
                {7453.567825797286, 399.4751992788239, 159.2832917825775, 337.9589514968601, 0.1698689500702162, 2.7297467875784314, 2.873581207474637, 2.6471975020865695, 2.6074907129009266, -2.803528334048878, 2.446966373013071},
                {7501.215288666331, 160.13209546935522, 321.88288662066594, 354.92034089574645, 2.995544287333411, 2.4884917165370584, 3.0662060227404457, 2.651776599360028, -2.810088027725762, 2.1230140497036816, 2.8602969612563895},
                {7354.118093169994, 313.163637753047, 110.99309495743496, 280.1691462287103, 0.15417049282680867, 2.555210675911156, -3.0023747040211872, 2.4246549251289404, -2.7930847259382747, 2.648211088286721, 2.376287308729295},
                {7503.690345748625, 157.58607653034204, 322.0317783064794, 354.68060039505264, 2.992162288069819, 2.4882767330986, -3.013383007987011, 2.4378163691508017, 2.611096138261441, -2.8147262797510892, 2.4503884666702542},
                {7347.742987141648, 319.0149429103198, 111.12908463128088, 280.3625781292308, 0.14814904667223677, 2.5539088569101116, 3.0719180557329206, 3.0718855899518167, 3.0718601269090424, 2.648255013718237, 2.389093689485752},
                {7501.361149389136, 160.0144117607134, 321.89807199507004, 354.90921386695476, 2.9955174460131904, 0.6530143236524879, -3.012828492127956, 2.875156350783929, 2.651662734446954, 3.0435221993556887, 2.485599013653714},
                {7501.755522798123, 158.4055973913351, 321.79179051045753, 354.55825201744045, 2.9892390220939196, -2.9704313792237387, 2.473423715802313, 2.4414769707910873, 2.611914739307232, 3.0125579592659313, 2.912232507888497},
                {7352.859181816195, 314.486792051327, 110.97633144214164, 280.14546251490987, 0.15214441092105133, 2.555369896926166, -3.0023658544305576, 2.424639036657557, 3.0518497759229724, 2.6121731405451674, 2.841394916198101},
                {7503.690668426017, 156.77292421279458, 321.9038725360531, 354.5258225990946, 2.9880713809765544, 2.4856077307554125, 3.0652098036092736, 3.065246767557195, 2.129887285033465, -2.8180944946834625, 2.4383715617220605},
                {7992.013570967843, 417.6914820048968, 170.21864420502646, 337.8727289124433, 2.9559914757276684, -0.11736314473838298, 0.8980744033634085, 0.0815262964130739, 0.9777996632064414, 0.14016430540017916, 0.2679037651098463},
                {7436.223470544071, 413.7219364526895, 152.72385173375324, 341.76133191888897, 0.16805090094095138, -2.9562779120491403, 2.4670563588327985, 2.4358629326153056, 2.609926144523332, -2.233252855487664, 1.8395404655139354},
                {7356.4062758668615, 310.1456853795643, 111.18214813463284, 280.43882695066236, 0.16105277340066815, 2.5533953733557464, 3.0719060411386496, 2.64820180315672, 2.6121993237406382, 3.027484077566298, 2.8699987551747155},
                {7502.923946225357, 158.55298480907038, 322.02183556522175, 354.77141182022865, 2.994161836285007, 2.488898886152441, 3.0661964961678927, 3.0662327604239796, 2.651732249296109, 2.6109020946152843, 2.9122671515438525},
                {7452.423969695407, 399.3300017482649, 157.30146508207486, 339.6968043785435, 0.17256652579939583, 2.5054581505982387, 3.067419680001866, 2.648410589147658, -2.803610826174723, 3.0674926373007634, 1.719394267053196},
                {7502.975608106016, 156.18474615205645, 321.67664694589973, 354.19842210815517, 2.982551815971324, 2.480733840612096, 3.063958187370974, 2.655137800933568, 2.6126518781047494, -2.257941629585412, 1.7407842948216337},
                {7986.972943254414, 416.62943890003004, 168.4390080910486, 339.632474775007, 2.9485297610989267, -0.09450982719648238, 0.6412714461698429, 0.26378659729684895, 0.9713767828926285, -0.29394073277508526, 0.6714599768997362},
                {7488.851553599211, 167.24923572813142, 320.17007076145364, 354.86178840229485, 2.9828779674936743, -2.9979126478043248, 2.2284089254839876, 3.0620341003281366, 2.150448670276727, -2.2763019964302345, 1.8378679797339958},
                {7999.9999999809515, 419.83482463918614, 144.24819803046287, 346.8963692160708, 2.9679035254010357, 0.660460852325213, -0.7695946222794976, 0.8573548454654738, 0.9483939363719001, -0.271098877412143, 0.6890921846988848},
                {7452.101018711315, 400.40317353307057, 158.68815188657902, 338.70247359524296, 0.16992082837841951, 2.5072162813697925, 3.0678264270799804, 3.0678622629984638, 2.64757506329545, -2.801718180917723, 1.7251882284281812},
                {7396.596513257714, 72.13196971962782, 394.5357502268957, 170.5016299322575, 2.9549810977226287, 0.08417849529138335, 0.04403640829047565, 1.4800183332490435, 2.9709319853265255, 0.170556997536827, 0.704067248142073},
        };
        for (double[] x: xs) {
            double y = eval(x);
            Trajectory tra = new Trajectory(y, x);
            System.out.println(tra.resos());
        }
    }

    void join_logs(String dirName, String pattern, String fname) {   
        List<String> lines = Utils.readFiles(dirName, pattern);
        for (String line: lines) {
            String[] tokens = line.split(" ");
            if (tokens.length < 12) 
                continue;
            double y = Double.parseDouble(tokens[0]);
            long hash = tokens[1].hashCode();
            String args = line.substring(line.lastIndexOf("[")+1, line.length()-1);
            double[] x = ArrayUtils.toPrimitive(
                    Arrays.stream(args.split(", ")).map(Double::parseDouble).toArray(Double[]::new));
            if (!bestTrajectories_.containsKey(hash) || y < bestTrajectories_.get(hash).y)
                bestTrajectories_.put(hash, new Trajectory(y, x));
        }
        prettyTrajectories(fname);
    }
    
    Solo optimize() {
        Utils.startTiming();
        Solo fit = create();
        fit.minimizeN(12800000, new Bite(6), 120000, 0, 31, 1E99);
//        CoordRetry.optimize(80000, this, new DE(), null, 1E99, 0, 2000, true);
//        CoordRetry.optimize(80000, this, new DECMA(), null, 1E99, 0, 2000, true);
//        CoordRetry.optimize(80000, this, new DeBite(), null, 1E99, 0, 2000, true);        
        System.out.println(fit);
        System.out.println(Utils.measuredMillis() + " ms");
        return fit;
    }
 
    public static void main(String[] args) throws FileNotFoundException {
        Log.setLog();
        Solo solo = new Solo();
        solo.optimize();
        solo.check_good_solutions();
//        solo.join_logs("logs", "reso", "collected.txt");
    }

}
